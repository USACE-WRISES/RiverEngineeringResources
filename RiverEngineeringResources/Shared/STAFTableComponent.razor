@using MudBlazor
@using System.Collections.Generic
@using RiverEngineeringResources.Shared
@using CsvHelper
@using CsvHelper.Configuration
@using System.Globalization
@using System.IO
@using System.Net.Http.Json
@using System.Text.Json
@using System.IO;
@using System.Globalization;
@using System.Text
@inject SharedData SharedData
@inject SharedFunctions SharedFunctions
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<style>
    .mud-table-container td, .mud-table-container th {
        border-block-color: black;
    }

    .header-font-size {
        font-size: medium;
    }

    .nonclickabletext {
        border-color: black;
        text-decoration: none;
        font-size: medium;
        color: black;
        margin: -4px; /* Remove margins */
        padding: -4px; /* Remove paddings */
    }

    .nonclickabletextsmall {
        border-color: black;
        text-decoration: none;
        font-size: small;
        color: black;
        margin: -4px; /* Remove margins */
        padding: -4px; /* Remove paddings */
    }

    .clickabletext {
        border-color: black;
        cursor: pointer;
        text-decoration: none;
        font-size: medium;
        color: black;
        margin: -4px; /* Remove margins */
        padding: -4px; /* Remove paddings */
    }

        .clickabletext:hover {
            text-decoration: underline;
        }

    .missingScore {
        border-color: black;
        text-decoration: none;
        font-size: smaller;
        margin: -4px; /* Remove margins */
        padding: -4px; /* Remove paddings */
        font-style: italic;
        color: darkgray;
    }

    .subindex-container {
    }

    .vh100 {
        height: 100vh; /*from bootstrap*/
    }

    .mud-table.fullheight {
        display: flex;
        flex: 1 1 auto;
        overflow: auto;
    }

        .mud-table.fullheight > .mud-table-container {
            min-height: 0px;
            flex: 1 1 auto;
        }
</style>

@*         <MudPaper Elevation="0" Class="d-flex justify-end mb-3">
            <MudText Typo="Typo.caption" Align="Align.Center">
            Last Published Date: 2024-11-04 1033
            </MudText>
            </MudPaper> *@

@if (isDataLoaded)
{
    <MudPaper Elevation="0" Class="d-flex flex-row flex-grow-1 gap-0" Outlined="false">
        <MudStack Class="d-flex flex-row flex-grow-1" Style="width:100%">
            <MudPaper Elevation="0" Class="d-flex flex-row justify-center relative align-end">
                <MudPaper Elevation="0" Style="position:absolute">
                    <MudTextField @bind-Value="streamModelName" Label="Model Name" Variant="Variant.Outlined" Margin="Margin.Dense" Style="max-width:200px;" />
                </MudPaper>

                <MudPaper Class="my-0" Elevation="0" Style="margin-left:auto;">
                    <MudMenu Label="Export" AnchorOrigin="Origin.BottomLeft" Dense="true" FullWidth="true" TransformOrigin="Origin.TopLeft" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" Style="margin-right: 8px;">
                        <MudMenuItem @onclick="ExportXlsx">
                            Excel
                        </MudMenuItem>
                        <MudMenuItem @onclick="ExportData">
                            Csv
                        </MudMenuItem>
                    </MudMenu>
                    <MudMenu Label="Import" AnchorOrigin="Origin.BottomLeft" Dense="true" FullWidth="true" TransformOrigin="Origin.TopLeft" Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small">
                        <MudMenuItem @onclick="@OnImportClick">
                            Csv
                        </MudMenuItem>
                    </MudMenu>
                    @*                 <MudButton OnClick="ExportData" Color="Color.Default" Variant="Variant.Outlined" Style="margin-right: 8px;" IconSize="Size.Small" Size="Size.Small">
                Export
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Default" Size="Size.Small" OnClick="@OnImportClick">
                Import
                </MudButton>
                <MudButton OnClick="ExportXlsx" Color="Color.Default" Variant="Variant.Outlined" Style="margin-left: 8px;" IconSize="Size.Small" Size="Size.Small">
                Excel
                </MudButton> *@
                    <InputFile OnChange="HandleFileUpload" id="fileUploadInput" hidden="true" @ref="importFileInputRef" />
                </MudPaper>
            </MudPaper>

            <MudPaper Elevation="0" Class="d-flex flex-row justify-center">

                <MudGrid>
                    <MudItem xs="12">
                        <MudTabs Centered="true" Elevation="0" Rounded="true">
                            <MudTabPanel Text="Variables">
                                <MudPaper Elevation="0" Class="pt-0" Outlined="false">
                                    <MudStack Class="pb-6" Spacing="0" Style="width:100%;">


                                        <MudTable Items="@(GetTableItems())" Dense="true" Hover="true" Bordered="true" Striped="true" RowStyleFunc="RowStyleFunc" Style="width:100%;">
                                            <HeaderContent>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Functional Category</MudTh>
                                                <MudTh Class="header-font-size" Style="width:auto; vertical-align:bottom">Functional Variable</MudTh>
                                                <MudTh Class="header-font-size" Style="vertical-align:bottom">Description</MudTh>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Physical</MudTh>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Chemical</MudTh>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Biological</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>

                                                @if (IsFirstVariableRow(@context.Category, @context.Variable) && IsFirstMetricRow(@context.Variable, @context.Metric))
                                                {
                                                    <MudTd Style="border-color:black; vertical-align:top; text-align:center" DataLabel="Functional Category" RowSpan="@(GetRowSpanForCategory(@context.Category))">
                                                        <MudText Class="clickabletext" @onclick="@(() => OnEditVariableClick(@context.Variable))">@context.Category.FunctionalCategory</MudText>
                                                    </MudTd>
                                                }

                                                @if (IsFirstMetricRow(@context.Variable, @context.Metric))
                                                {
                                                    <MudTd Style="@(context.Variable.IsSelected ? "width: auto%; border-color:black;" : "width: auto%; border-color:black; background-color:lightgray;")" DataLabel="Functional Variable" RowSpan="@(GetRowSpanForVariable(@context.Variable))">

                                                        <MudStack Class="d-flex flex-grow-1" Row="true" AlignItems="AlignItems.Center">
                                                            <MudCheckBox T="bool" DisableRipple="true" Dense="true" Size="Size.Small" @bind-Checked="@context.Variable.IsSelected" Style="margin-right: 8px;" />
                                                            <MudText Class="clickabletext" @onclick="@(() => OnEditMetricClick(@context.Variable))">@GetFormattedVariableType(@context.Variable.VariableType)</MudText>
                                                        </MudStack>
                                                    </MudTd>

                                                    <MudTd Class="nonclickabletext;" Style="@(context.Variable.IsSelected ? "border-color:black; text-align:start;" : "border-color:black; background-color:lightgray; text-align:start;")" DataLabel="Description">
                                                        <MudText Class="nonclickabletext;">
                                                            @(context.GetFunctionalVariableStatement(functionalVariableSelectableOptions))
                                                        </MudText>
                                                        
                                                    </MudTd>

                                                    <MudTd Class="nonclickabletext" Style="@(context.Variable.IsSelected ? "border-color:black; text-align:center;" : "border-color:black; background-color:lightgray; text-align:center;")" DataLabel="Physical">
                                                        @(GetScoreText(CalculatePhysicalScore(@context.Variable), GetFunctionalVariableOption(@context.Variable.VariableType).Physical, @context.Variable.Metrics.Count, true))
                                                    </MudTd>

                                                    <MudTd Class="nonclickabletext" Style="@(context.Variable.IsSelected ? "border-color:black; text-align:center;" : "border-color:black; background-color:lightgray; text-align:center;")" DataLabel="Chemical">
                                                        @(GetScoreText(CalculateChemicalScore(@context.Variable), GetFunctionalVariableOption(@context.Variable.VariableType).Chemical, @context.Variable.Metrics.Count, true))
                                                    </MudTd>

                                                    <MudTd Class="nonclickabletext" Style="@(context.Variable.IsSelected ? "border-color:black; text-align:center;" : "border-color:black; background-color:lightgray; text-align:center;")" DataLabel="Biological">
                                                        @(GetScoreText(CalculateBiologicalScore(@context.Variable), GetFunctionalVariableOption(@context.Variable.VariableType).Biological, @context.Variable.Metrics.Count, true))
                                                    </MudTd>

                                                    @* Dummy column because if it's removed then there's weird formatting on second row of metrics (missing border and slightly shifted text) *@
                                                    <MudTd Style="display:none; border-color:black; text-align:center;">
                                                    </MudTd>
                                                }


                                            </RowTemplate>

                                            <FooterContent>
                                                <!-- Combined Footer Content -->
                                                <MudTd ColSpan="3">
                                                    <MudText Class="nonclickabletext" Style="text-align:right; vertical-align:middle;">
                                                        <div>Direct Effect</div>
                                                        <div>Indirect Effect</div>
                                                    </MudText>
                                                </MudTd>
                                                <MudTd Style="text-align:center; border-color:black; vertical-align:top;">
                                                    <div class="subindex-container">
                                                        <MudText>@GetPhysicalSubIndex(false, false, false, true, false, true, false)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetPhysicalSubIndex(false, false, false, false, true, true, false)</MudText>
                                                    </div>
                                                </MudTd>
                                                <MudTd Class="nonclickabletext" Style="text-align:center; border-color:black; vertical-align:middle;">
                                                    <div class="subindex-container">
                                                        <MudText>@GetChemicalSubIndex(false, false, false, true, false, true, false)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetChemicalSubIndex(false, false, false, false, true, true, false)</MudText>
                                                    </div>
                                                </MudTd>
                                                <MudTd Style="text-align:center; border-color:black; vertical-align:top;">
                                                    <div class="subindex-container">
                                                        <MudText>@GetBiologicalSubIndex(false, false, false, true, false, true, false)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetBiologicalSubIndex(false, false, false, false, true, true, false)</MudText>
                                                    </div>
                                                </MudTd>
                                            </FooterContent>

                                        </MudTable>

                                    </MudStack>
                                </MudPaper>
                            </MudTabPanel>
                            <MudTabPanel Text="Metrics">
                                <MudPaper Elevation="0" Class="pt-3" Outlined="false">
                                    <MudStack Class="pb-6" Spacing="0" Style="width:100%;">


                                        <MudTable Items="@(GetTableItems())" Dense="true" Hover="true" Bordered="true" Striped="true" RowStyleFunc="RowStyleFunc" Style="width:100%;">
                                            <HeaderContent>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Functional Category</MudTh>
                                                <MudTh Class="header-font-size" Style="vertical-align:bottom">Functional Variable</MudTh>
                                                <MudTh Class="header-font-size" Style="vertical-align:bottom">Metrics</MudTh>
                                                @* <MudTh>Performance Criteria</MudTh> *@
                                                <MudTh Class="header-font-size" Style="vertical-align:bottom">Sources</MudTh>
                                                <MudTh Class="header-font-size" Style="vertical-align:bottom">Methods</MudTh>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Performance Criteria</MudTh>
                                                @*                                                 <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">
                                            Metric Score<br />(0-1.0)
                                            </MudTh> *@

                                            </HeaderContent>
                                            <RowTemplate>

                                                @if (IsFirstVariableRow(@context.Category, @context.Variable) && IsFirstMetricRow(@context.Variable, @context.Metric))
                                                {
                                                    <MudTd Style="border-color:black; vertical-align:top; text-align:center;" DataLabel="Functional Category" RowSpan="@(GetRowSpanForCategory(@context.Category))">
                                                        <MudText Class="clickabletext" @onclick="@(() => OnEditVariableClick(@context.Variable))">@context.Category.FunctionalCategory</MudText>
                                                    </MudTd>
                                                }
                                                @if (IsFirstMetricRow(@context.Variable, @context.Metric))
                                                {
                                                    <MudTd Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")" DataLabel="Functional Variable" RowSpan="@(GetRowSpanForVariable(@context.Variable))">
                                                        <MudStack Row="true" AlignItems="AlignItems.Center">
                                                            <MudCheckBox T="bool" DisableRipple="true" Dense="true" Size="Size.Small" @bind-Checked="@context.Variable.IsSelected" Style="margin-right: 8px;" /> @* @bind-Checked="@context.Variable.IsSelected" *@
                                                            <MudText Class="clickabletext" @onclick="@(() => OnEditMetricClick(@context.Variable))">@GetFormattedVariableType(@context.Variable.VariableType)</MudText>
                                                        </MudStack>
                                                    </MudTd>
                                                }

                                                <MudTd Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")" Class="nonclickabletext" DataLabel="Metrics">@context.Metric.MetricName</MudTd>
                                                <MudTd Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")" Class="nonclickabletext" DataLabel="Sources">@context.Metric.Assessment</MudTd>
                                                <MudTd Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")" Class="nonclickabletext" DataLabel="Methods">@context.Metric.Method</MudTd>
                                                @* <MudTd Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")" Class="nonclickabletext" DataLabel="Performance Criteria">@context.Metric.PerformanceStandard</MudTd> *@
                                                <MudTd DataLabel="Performance Criteria" Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")">
                                                    @if (@context.Variable.Metrics.Count > 0)
                                                    {
                                                        <MudText Class="clickabletext" Style="border-color: black; border-inline-color:black; text-align:center;" @onclick="@(() => OnEditScoreClick(@context.Metric))">Edit</MudText>
                                                    }
                                                </MudTd>
                                                @*                                                 <MudTd DataLabel="Metric Score" Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")">
                                            @if (@context.Variable.Metrics.Count > 0)
                                            {
                                            <MudText Class="clickabletext" Style="border-color: black; border-inline-color:black; text-align:center;" @onclick="@(() => OnEditScoreClick(@context.Metric))">@context.Metric.Score</MudText>
                                            }
                                            </MudTd> *@


                                                @* Dummy column because if it's removed then there's weird formatting on second row of metrics (missing border and slightly shifted text) *@
                                                <MudTd Style="display:none; border-color:black; text-align:center;">
                                                </MudTd>

                                            </RowTemplate>

                                        </MudTable>

                                    </MudStack>
                                </MudPaper>
                            </MudTabPanel>
                            <MudTabPanel Text="Scoring">
                                <MudPaper Elevation="0" Class="pt-3" Outlined="false">
                                    <MudStack Class="pb-6" Spacing="0" Style="width:100%;">


                                        <MudTable Items="@(GetTableItems())" Dense="true" Hover="true" Bordered="true" Striped="true" RowStyleFunc="RowStyleFunc" Style="width:100%;">
                                            <HeaderContent>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Functional Category</MudTh>
                                                <MudTh Class="header-font-size" Style="vertical-align:bottom">Functional Variable</MudTh>
                                                <MudTh Class="header-font-size" Style="vertical-align:bottom">Metrics</MudTh>
                                                @* <MudTh>Performance Criteria</MudTh> *@
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">
                                                    Metric Score<br />(0-1.0)
                                                </MudTh>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Variable Score<br />(0-1.0)</MudTh>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Physical</MudTh>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Chemical</MudTh>
                                                <MudTh Class="header-font-size" Style="text-align:center; vertical-align:bottom">Biological</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>

                                                @if (IsFirstVariableRow(@context.Category, @context.Variable) && IsFirstMetricRow(@context.Variable, @context.Metric))
                                                {
                                                    <MudTd Style="border-color:black; vertical-align:top; text-align:center;" DataLabel="Functional Category" RowSpan="@(GetRowSpanForCategory(@context.Category))">
                                                        <MudText Class="clickabletext" @onclick="@(() => OnEditVariableClick(@context.Variable))">@context.Category.FunctionalCategory</MudText>
                                                    </MudTd>
                                                }
                                                @if (IsFirstMetricRow(@context.Variable, @context.Metric))
                                                {
                                                    <MudTd Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")" DataLabel="Functional Variable" RowSpan="@(GetRowSpanForVariable(@context.Variable))">
                                                        <MudStack Row="true" AlignItems="AlignItems.Center">
                                                            <MudCheckBox T="bool" DisableRipple="true" Dense="true" Size="Size.Small" @bind-Checked="@context.Variable.IsSelected" Style="margin-right: 8px;" /> @* @bind-Checked="@context.Variable.IsSelected" *@
                                                            <MudText Class="clickabletext" @onclick="@(() => OnEditMetricClick(@context.Variable))">@GetFormattedVariableType(@context.Variable.VariableType)</MudText>
                                                        </MudStack>
                                                    </MudTd>
                                                }
                                                <MudTd Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")" Class="nonclickabletext" DataLabel="Metrics">@context.Metric.MetricName</MudTd>
                                                @* <MudTd Style="border-color:black" Class="nonclickabletext" DataLabel="Performance Criteria">@context.Metric.PerformanceStandard</MudTd> *@
                                                <MudTd DataLabel="Metric Score" Style="@(context.Variable.IsSelected ? "border-color:black;" : "border-color:black; background-color:lightgray;")">
                                                    @if (@context.Variable.Metrics.Count > 0)
                                                    {
                                                        <MudText Class="clickabletext" Style="border-color: black; border-inline-color:black; text-align:center;" @onclick="@(() => OnEditScoreClick(@context.Metric))">@context.Metric.Score</MudText>
                                                    }
                                                </MudTd>

                                                @if (IsFirstMetricRow(@context.Variable, @context.Metric))
                                                {
                                                    <MudTd Class="nonclickabletext" Style="@(context.Variable.IsSelected ? "border-color:black; text-align:center;" : "border-color:black; background-color:lightgray; text-align:center;")" DataLabel="Variable Score" RowSpan="@(GetRowSpanForVariable(@context.Variable))">
                                                        @if (@context.Variable.Metrics.Count > 0)
                                                        {
                                                            @(CalculateVariableScore(@context.Variable))
                                                        }
                                                    </MudTd>

                                                    <MudTd Class="nonclickabletext" Style="@(context.Variable.IsSelected ? "border-color:black; text-align:center;" : "border-color:black; background-color:lightgray; text-align:center;")" DataLabel="Physical" RowSpan="@(GetRowSpanForVariable(@context.Variable))">
                                                        @(GetScoreText(CalculatePhysicalScore(@context.Variable), GetFunctionalVariableOption(@context.Variable.VariableType).Physical, @context.Variable.Metrics.Count))
                                                    </MudTd>

                                                    <MudTd Class="nonclickabletext" Style="@(context.Variable.IsSelected ? "border-color:black; text-align:center;" : "border-color:black; background-color:lightgray; text-align:center;")" DataLabel="Chemical" RowSpan="@(GetRowSpanForVariable(@context.Variable))">
                                                        @(GetScoreText(CalculateChemicalScore(@context.Variable), GetFunctionalVariableOption(@context.Variable.VariableType).Chemical, @context.Variable.Metrics.Count))
                                                    </MudTd>

                                                    <MudTd Class="nonclickabletext" Style="@(context.Variable.IsSelected ? "border-color:black; text-align:center;" : "border-color:black; background-color:lightgray; text-align:center;")" DataLabel="Biological" RowSpan="@(GetRowSpanForVariable(@context.Variable))">
                                                        @(GetScoreText(CalculateBiologicalScore(@context.Variable), GetFunctionalVariableOption(@context.Variable.VariableType).Biological, @context.Variable.Metrics.Count))
                                                    </MudTd>
                                                }

                                                @* Dummy column because if it's removed then there's weird formatting on second row of metrics (missing border and slightly shifted text) *@
                                                <MudTd Style="display:none; border-color:black; text-align:center;">
                                                </MudTd>

                                            </RowTemplate>

                                            <FooterContent>
                                                <!-- Combined Footer Content -->
                                                <MudTd ColSpan="5">
                                                    <MudText Class="nonclickabletext" Style="text-align:right; vertical-align:middle;">
                                                        Weighted Score Total
                                                        <div>Direct Effect</div>
                                                        <div>Indirect Effect</div>
                                                        <div>Max Score</div>
                                                        <div>Condition Sub-Index</div>
                                                        <div>Ecosystem Condition Index</div>
                                                    </MudText>
                                                </MudTd>
                                                <MudTd Style="text-align:center; border-color:black; vertical-align:top;">
                                                    <div class="subindex-container">
                                                        <MudText>@GetSubIndexScore("Physical", GetPhysicalSubIndex(false, true))</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetPhysicalSubIndex(false, false, false, true)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetPhysicalSubIndex(false, false, false, false, true)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetPhysicalSubIndex(false, false, true, false, false)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        @if (@GetSubIndexScore("Physical", GetPhysicalSubIndex()) == "-")
                                                        {
                                                            <MudText>-</MudText>
                                                        }
                                                        else
                                                        {
                                                            <MudText>@GetSubIndexScore("Physical", GetPhysicalSubIndex())</MudText>
                                                        }
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText Class="missingScore"> </MudText>
                                                    </div>
                                                </MudTd>
                                                <MudTd Class="nonclickabletext" Style="text-align:center; border-color:black; vertical-align:middle;">
                                                    <div class="subindex-container">
                                                        <MudText>@GetSubIndexScore("Chemical", GetChemicalSubIndex(false, true))</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetChemicalSubIndex(false, false, false, true)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetChemicalSubIndex(false, false, false, false, true)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetChemicalSubIndex(false, false, true, false, false)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        @if (@GetSubIndexScore("Chemical", GetChemicalSubIndex()) == "-")
                                                        {
                                                            <MudText>-</MudText>
                                                        }
                                                        else
                                                        {
                                                            <MudText>@GetSubIndexScore("Chemical", GetChemicalSubIndex())</MudText>
                                                        }
                                                    </div>


                                                    <div>
                                                        @if (GetEcosystemConditionIndexOrMissing() == "-")
                                                        {
                                                            <MudText>-</MudText>
                                                        }
                                                        else
                                                        {
                                                            <MudText>@GetEcosystemConditionIndexOrMissing()</MudText>
                                                        }
                                                    </div>
                                                </MudTd>
                                                <MudTd Style="text-align:center; border-color:black; vertical-align:top;">
                                                    <div class="subindex-container">
                                                        <MudText>@GetSubIndexScore("Biological", GetBiologicalSubIndex(false, true))</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetBiologicalSubIndex(false, false, false, true)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetBiologicalSubIndex(false, false, false, false, true)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        <MudText>@GetBiologicalSubIndex(false, false, true, false, false)</MudText>
                                                    </div>
                                                    <div class="subindex-container">
                                                        @if (@GetSubIndexScore("Biological", GetBiologicalSubIndex()) == "-")
                                                        {
                                                            <MudText>-</MudText>
                                                        }
                                                        else
                                                        {
                                                            <MudText>@GetSubIndexScore("Biological", GetBiologicalSubIndex())</MudText>
                                                        }
                                                    </div>

                                                    <div class="subindex-container">
                                                        <MudText Class="missingScore"> </MudText>
                                                    </div>
                                                </MudTd>
                                            </FooterContent>

                                        </MudTable>

                                    </MudStack>
                                </MudPaper>


                            </MudTabPanel>
                        </MudTabs>

                    </MudItem>

                </MudGrid>

            </MudPaper>

        </MudStack>
    </MudPaper>






}
else
{
    <MudGrid Justify="Justify.Center">
        <MudItem>
            @* <MudProgressCircular Color="Color.Default" Indeterminate="true" /> *@
            Loading...
        </MudItem>
    </MudGrid>
}


<MudDialog @bind-IsVisible="editVariableDialogVisible" Class="dialog-colored" Options="MudDialog1Options2">

    <DialogContent>
        <MudStack Style="max-height:80vh">
            <MudText Typo="Typo.h6">@selectedCategoryItem?.FunctionalCategory</MudText>
            <MudPaper Elevation="0" Class="d-flex align-items-center justify-center p-1">
                <MudText Align="Align.Center">
                    <MudLink OnClick="@(args => ToggleSelectAllVariables(filteredVariableSelectableOptionsForDialog,true))" Class="mr-2" Style="cursor:pointer;font-size:medium">Select All</MudLink> |
                    <MudLink OnClick="@(args => ToggleSelectAllVariables(filteredVariableSelectableOptionsForDialog,false))" Class="ml-2" Style="cursor:pointer;font-size:medium">Unselect All</MudLink>
                </MudText>
            </MudPaper>
            <MudTable Class="fullheight" Items="filteredVariableSelectableOptionsForDialog" Hover="true" Bordered="true" Striped="true" Dense="true">
                <HeaderContent>
                    <MudTh>Select</MudTh>
                    <MudTh>Functional Variable</MudTh>
                    <MudTh>Functional Statement</MudTh>
                    <MudTh>Physical</MudTh>
                    <MudTh>Chemical</MudTh>
                    <MudTh>Biological</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Select">
                        <MudCheckBox T="bool" @bind-Checked="@context.IsSelected" />
                    </MudTd>
                    <MudTd DataLabel="Functional Variable">@context.FunctionalVariable</MudTd>
                    <MudTd DataLabel="Functional Statement">@context.FunctionalStatement</MudTd>
                    <MudTd DataLabel="Physical">@context.Physical</MudTd>
                    <MudTd DataLabel="Chemical">@context.Chemical</MudTd>
                    <MudTd DataLabel="Biological">@context.Biological</MudTd>
                </RowTemplate>
            </MudTable>

            <MudStack Row="true" Justify="Justify.FlexEnd">
                <MudButton OnClick="@SaveSelectedVariables" Color="Color.Primary">Save</MudButton>
                <MudButton OnClick="@CloseEditVariableDialog" Color="Color.Secondary">Cancel</MudButton>
            </MudStack>
        </MudStack>

    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="editMetricDialogVisible" Options="MudDialog1Options2">
    <DialogContent>
        <MudStack Style="max-height:80vh; width:100%">
            <!-- this is needed to avoid scroll bar on dialog -->
            <MudText Typo="Typo.h6">Select Metrics for @selectedVariable?.VariableType</MudText>
            <MudPaper Elevation="0" Class="d-flex align-items-center justify-center p-1">
                <MudText Align="Align.Center">
                    <MudLink OnClick="@(args => ToggleSelectAllMetrics(filteredMetricOptionsForDialog,true))" Class="mr-2" Style="cursor:pointer;font-size:medium">Select All</MudLink> |
                    <MudLink OnClick="@(args => ToggleSelectAllMetrics(filteredMetricOptionsForDialog,false))" Class="ml-2" Style="cursor:pointer;font-size:medium">Unselect All</MudLink>
                </MudText>
            </MudPaper>
            <MudDataGrid GroupExpanded="true" ReadOnly="false" EditMode="DataGridEditMode.Form" Elevation="0" Style="column-fill:balance-all; width:100%; heigth:100%; flex-grow: 1;" T="MetricOption" @ref="mudDataGrid" Items="filteredMetricOptionsForDialog" SortMode="SortMode.Single" Filterable="true" FilterMode="DataGridFilterMode.ColumnFilterMenu" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive" ShowFilterIcons="true" QuickFilter="@_quickFilter"
                         Hideable="false" Groupable="true" DragDropColumnReordering="true" DragIndicatorIcon="" DragIndicatorSize="0" HorizontalScrollbar="true" Outlined="true" SelectedItemChanged="@selectedItemChanged" Dense="true" Bordered="true" Striped="true" Hover="true" Virtualize="false" FixedHeader="false" ShowMenuIcon="true">
                <ToolBarContent>
                    <MudGrid Style="width: 100%;">
                        <MudItem xs="2" Class="gap-0 my-n3 pa-0" />
                        <MudItem xs="8" Class="gap-0 my-n3 pa-0">
                            <MudStack Class="d-inline justify-center flex-grow-0" Row="true">
                                <MudTextField @bind-Value="_searchString" Clearable="true" Placeholder="Search" Margin="Margin.Dense" Adornment="Adornment.Start" Immediate="false"
                                              AdornmentIcon="@Icons.Material.Filled.Search" DebounceInterval="500" IconSize="Size.Small"></MudTextField>
                                <MudTooltip Text="Clear Filters">
                                    <MudIconButton Class="mt-4" Icon="@filtersOnStyle()" Size="Size.Small" OnClick="@clearFilters" aria-label="filter"></MudIconButton>
                                </MudTooltip>
                            </MudStack>
                        </MudItem>
                        <MudItem xs="2" Class="gap-0 my-n3 pa-0" />
                    </MudGrid>
                </ToolBarContent>

                <NoRecordsContent>
                    <MudText Style="color:#222; font-size:13px; font-weight:normal;font-family:Arial">No resources found.</MudText>
                </NoRecordsContent>

                <Columns>
                    <PropertyColumn Property="x => x.IsSelected" Title="Select">
                        <CellTemplate>
                            <MudCheckBox T="bool" @bind-Checked="context.Item.IsSelected" />
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Assessment" Title="Assessment" Grouping GroupBy="@_groupBy">
                        <GroupTemplate>
                            <span style="font-weight:bold">@context.Grouping.Key</span>
                        </GroupTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.MetricShortName" Title="Metric ID" />
                    <PropertyColumn Property="x => x.MetricName" Title="Metric Name" />
                    <PropertyColumn Property="x => x.PerformanceStandard" Title="Performance Standard" />
                    <PropertyColumn Property="x => x.Method" Title="Method" />
                    <PropertyColumn Property="x => x.Tier" Title="Tier" />
                </Columns>

                @*                     <ChildRowContent>
                <MudPaper Elevation="0">
                @if (context.Item != null)
                {
                <MudStack Class="" Row="true">
                <MudText Class="d-flex flex-wrap align-self-center" Style="@GetTypeColor(context.Item)">[@context.Item.Assessment_Class]</MudText>
                <MudLink Class="d-flex flex-wrap" Style="@GetLinkColor(context.Item)" Href="@context.Item.URL_For_User_Guide" Target="_blank" Color="@GetLink2Color(context.Item)" Underline="@GetHoverableTitleLink(context.Item)">@context.Item.Resource_Name</MudLink>
                </MudStack>
                <MudStack Row="true">
                <MudText Class="d-flex flex-wrap" Style="color:#006621; font-size:13px; font-weight:normal;font-family:Arial">@context.Item.Agency_Or_Organization - @context.Item.Year_Of_Publication_Or_Latest_Update_Int</MudText>
                </MudStack>
                <MudText Class="d-flex flex-wrap" Style="color:#222; font-size:13px; font-weight:normal;font-family:Arial">@context.Item.DescriptionClip</MudText>
                }
                </MudPaper>
                </ChildRowContent> *@

                <PagerContent>
                    <MudDataGridPager Class="gap-0" T="MyAssessmentResource" PageSizeOptions="new int[]{10, 25, 50, 100}" />
                </PagerContent>
            </MudDataGrid>



            <MudStack Row="true" Justify="Justify.FlexEnd">
                @*                     <MudButton OnClick="@(() => UnselectAllMetrics())" Color="Color.Default" Style="margin-right: auto;">Unselect All</MudButton> *@
                <MudButton OnClick="@SaveSelectedMetrics" Color="Color.Primary">Save</MudButton>
                <MudButton OnClick="@CloseEditMetricDialog" Color="Color.Secondary">Cancel</MudButton>
            </MudStack>
        </MudStack>


    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>


<MudDialog @bind-IsVisible="editScoreDialogVisible" Options="MudDialog1Options">
    <DialogContent>
        <MudContainer Style="max-width:90%; height: 80vh;">
            <div>
                <MudText Typo="Typo.h6">Edit Performance Criteria @selectedMetric?.MetricName</MudText>
                <MudGrid>
                    <MudItem xs="3">
                        <MudTable Items="lookupTableItems" Hover="true" Bordered="true" Striped="true" Dense="true">
                            <HeaderContent>
                                <MudTh>X (Measurement Value)</MudTh>
                                <MudTh>Y (Metric Score)</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="X">
                                    <MudNumericField T="double" HideSpinButtons="true" Value="@context.XValue" ValueChanged="@(v => { context.XValue = v; OnLookupTableItemChanged(); })" Variant="Variant.Text" />
                                </MudTd>
                                <MudTd DataLabel="Y">
                                    <MudNumericField T="double" HideSpinButtons="true" Value="@context.YValue" ValueChanged="@(v => { context.YValue = v; OnLookupTableItemChanged(); })" Variant="Variant.Text" />
                                </MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="@(() => RemoveRow(context))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                        <MudButton OnClick="AddRow" Color="Color.Primary" Style="margin-top:10px;">Add Row</MudButton>
                    </MudItem>
                    <MudItem xs="9">
                        <MudChart ChartType="MudBlazor.ChartType.Line" ChartOptions="chartOptions" XAxisLabels="@xAxisLabels" ChartSeries="chartData" YAxisTitle="Metric Index Score" XAxisTitle="Measurement Value" Style="width:100%; height:100%;" />
                    </MudItem>
                </MudGrid>

                <MudText Typo="Typo.h6">Edit Score for @selectedMetric?.MetricName</MudText>
                <MudNumericField @bind-Value="selectedMetric.Score" Label="Score" Min="0.0" Max="1.0" Variant="Variant.Outlined" @ref="scoreInput" Style="margin-top:20px;" /> @* OnKeyDown="@(e => HandleEnterKey(e))" *@
            </div>
        </MudContainer>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@SaveScore" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="@CancelEditScore" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>

</MudDialog>


@code {
    private List<TableItem> tableItems;

    Func<MetricOption, object> _groupBy = x =>
    {

        return x.Assessment;
    };

    private Func<MetricOption, bool> _quickFilter => x =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;

            if (x.MetricName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        };



    private MudDataGrid<MetricOption> mudDataGrid;
    private string _searchString;

    private async void clearFilters()
    {
        if (mudDataGrid == null)
        {
            return;
        }

        await mudDataGrid.ClearFiltersAsync();
    }

    private void openFilters()
    {
        if (mudDataGrid == null)
        {
            return;
        }

        mudDataGrid.OpenFilters();
    }

    private void closeGroups()
    {
        if (mudDataGrid == null)
        {
            return;
        }

        mudDataGrid.CollapseAllGroups();
    }
    private void expandGroups()
    {
        if (mudDataGrid == null)
        {
            return;
        }

        mudDataGrid.ExpandAllGroups();
    }



    private string filtersOnStyle()
    {
        if (mudDataGrid == null || mudDataGrid.FilterDefinitions.Count() == 0)
        {
            return Icons.Material.Outlined.FilterAlt;
        }
        else
        {
            return Icons.Material.Filled.FilterAlt;

        }

    }

    private void selectedItemChanged(MetricOption selectedItem)
    {
        // Handle selected item change logic here
    }

    private string GetTypeColor(MetricOption item)
    {
        // Provide logic to determine the color style for the item
        return "color: #000;";
    }

    private string GetLinkColor(MetricOption item)
    {
        // Provide logic to determine the color style for the link
        return "color: #1a0dab;";
    }

    private string GetLink2Color(MetricOption item)
    {
        // Provide logic to determine the color style for the secondary link
        return "color: #1a0dab;";
    }

    private bool GetHoverableTitleLink(MetricOption item)
    {
        // Determine whether the title link should be hoverable
        return true;
    }


    private string streamModelName = ""; // Initial name for the stream model
    private InputFile importFileInputRef;
    private MudNumericField<double> scoreInput;
    private bool firstRender = true;
    private double? originalScore;
    private string[] xAxisLabels;
    private DialogOptions MudDialog1Options = new DialogOptions { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true }; /* MaxWidth = MaxWidth.ExtraLarge, FullWidth = true */

    private DialogOptions MudDialog1Options2 = new DialogOptions { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true }; /* MaxWidth = MaxWidth.ExtraLarge, FullWidth = true */

    private string GetFormattedVariableType(FunctionalVariableType variableType)
    {
        return string.Concat(variableType.ToString().Select((x, i) => i > 0 && char.IsUpper(x) ? " " + x : x.ToString()));
    }

    private void UnselectAllMetrics()
    {
        foreach (var metric in filteredMetricOptionsForDialog)
        {
            metric.IsSelected = false;
        }
    }

    private void ToggleSelectAllVariables(List<FunctionalVariableOption> listFVO, bool SelectAll)
    {

        foreach (var variableOption in listFVO)
        {
            variableOption.IsSelected = SelectAll; // Toggle, it's opposite
        }
    }
    private void ToggleSelectAllMetrics(List<MetricOption> listFMO, bool SelectAll)
    {

        foreach (var metricOption in listFMO)
        {
            metricOption.IsSelected = SelectAll; // Toggle, it's opposite
        }
    }

    private void AddRow()
    {
        lookupTableItems.Add(new LookupTableItem { XValue = 0, YValue = 0 });
        OnLookupTableItemChanged();
    }

    private void RemoveRow(LookupTableItem item)
    {
        lookupTableItems.Remove(item);
        OnLookupTableItemChanged();
    }
    private async void OnEditScoreDialogAfterRender()
    {
        if (scoreInput != null)
        {
            await scoreInput.FocusAsync();
            await scoreInput.SelectAsync();
        }
        else // Wait for the component to render before focusing
        {
            for (int i = 0; i < 3; i++)
            {
                if (scoreInput != null)
                {
                    await scoreInput.FocusAsync();
                    await scoreInput.SelectAsync();
                    break;
                }
                await Task.Delay(500); // Wait for 0.5 second before checking again
            }
        }
    }
    private void HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            scoreInput?.BlurAsync(); // Finish editing before saving
            SaveScore();
        }
    }

    private List<LookupTableItem> lookupTableItems = new List<LookupTableItem>();
    private List<MudBlazor.ChartSeries> chartData;
    private MudBlazor.ChartOptions chartOptions = new MudBlazor.ChartOptions
    {
        // XAxisTicks = true,
        // YAxisTicks = true,
        // XAxisLabels = new List<string>()
    };

    private void InitializeLookupTableItems()
    {
        lookupTableItems = new List<LookupTableItem>
        {
            new LookupTableItem { XValue = 0, YValue = 0 },
            new LookupTableItem { XValue = 1, YValue = 1.0 }
        };
    }

    private void GenerateChartData()
    {
        var xValues = lookupTableItems.Select(item => item.XValue).ToArray();
        var yValues = lookupTableItems.Select(item => item.YValue).ToArray();

        chartData = new List<MudBlazor.ChartSeries>
        {
            new MudBlazor.ChartSeries
            {
                Name = "Metric Score",
                Data = yValues
            }
        };

        xAxisLabels = lookupTableItems.Select(item => item.XValue.ToString()).ToList().ToArray();

        chartOptions.YAxisTicks = 1;
        chartOptions.MaxNumYAxisTicks = 5;

        //StateHasChanged();
        // chartOptions.XAxisLabels = lookupTableItems.Select(item => item.XValue.ToString()).ToList();
    }

    private void OnEditScoreDialogOpened()
    {
        if (selectedMetric != null)
        {
            originalScore = selectedMetric.Score;

            // Initialize lookup table items and generate chart data.
            lookupTableItems = selectedMetric.PerformanceStandardLookupTable;
            GenerateChartData();
        }
    }
    private void OnLookupTableItemChanged()
    {
        GenerateChartData();
    }
    public class LookupTableItem
    {
        public double XValue { get; set; }
        public double YValue { get; set; }
    }

    // private string RowStyleFunc(TableItem arg1, int index)
    // {
    //     switch (arg1.Category.FunctionalCategory)
    //     {
    //         case FunctionalCategory.Hydrology:
    //             return "background-color: #D9E1F2";
    //         case FunctionalCategory.Hydraulics:
    //             return "background-color: #B4C6E7";
    //         case FunctionalCategory.Geomorphology:
    //             return "background-color: #FCE4D6";
    //         case FunctionalCategory.Physicochemical:
    //             return "background-color: #FFF2CC";
    //         case FunctionalCategory.Biology:
    //             return "background-color: #E2EFDA";
    //         default:
    //             return "background-color:white";
    //     }
    // }
    private string RowStyleFunc(TableItem arg1, int index)
    {
        // if (!arg1.Variable.IsSelected)
        // {
        //     return "background-color:gray";
        // }

        switch (arg1.Category.FunctionalCategory)
        {
            case FunctionalCategory.Hydrology:
                return "background-color: #D9E1F2";
            case FunctionalCategory.Hydraulics:
                return "background-color: #B4C6E7";
            case FunctionalCategory.Geomorphology:
                return "background-color: #FCE4D6";
            case FunctionalCategory.Physicochemical:
                return "background-color: #FFF2CC";
            case FunctionalCategory.Biology:
                return "background-color: #E2EFDA";
            default:
                return "background-color:white";
        }
    }

    // private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private List<FunctionalCategoryItem> functionalCategoryItems = new() { };
    private void LoadFunctionalCategoryItems()
    {
        functionalCategoryItems = new List<FunctionalCategoryItem>();

        foreach (var streamFunction in SharedData.MyStreamModelFunctionList)
        {
            var functionalCategory = Enum.TryParse<FunctionalCategory>(NormalizeEnumName(streamFunction.FunctionalCategory), true, out var parsedCategory)
                ? parsedCategory
                : FunctionalCategory.Hydrology; // Default to Hydrology if not found

            var functionalVariable = new FunctionalVariable
                {
                    VariableType = Enum.TryParse<FunctionalVariableType>(NormalizeEnumName(streamFunction.FunctionalVariable), true, out var parsedVariable)
                                                                                                                                                                                                    ? parsedVariable
                                                                                                                                                                                                    : FunctionalVariableType.CatchmentHydrology, // Default to CatchmentHydrology if not found
                    Metrics = new List<MetricOption>()
                };

            var existingCategory = functionalCategoryItems.FirstOrDefault(fc => fc.FunctionalCategory == functionalCategory);
            if (existingCategory != null)
            {
                existingCategory.FunctionalVariables.Add(functionalVariable);
            }
            else
            {
                functionalCategoryItems.Add(new FunctionalCategoryItem
                    {
                        FunctionalCategory = functionalCategory,
                        FunctionalVariables = new List<FunctionalVariable> { functionalVariable }
                    });
            }
        }
    }

    private string NormalizeEnumName(string input)
    {
        return input.Replace(" ", "").ToLowerInvariant();
    }

    private FunctionalCategoryItem selectedCategoryItem;
    private FunctionalVariable selectedVariable;
    private MetricOption selectedMetric;


    private bool editVariableDialogVisible = false;
    private bool editMetricDialogVisible = false;
    private bool editScoreDialogVisible = false;

    private List<MetricOption> filteredMetricOptionsForDialog = new();

    private List<FunctionalVariableOption> filteredVariableSelectableOptionsForDialog = new();
    private List<FunctionalVariableOption> functionalVariableSelectableOptions = new() { };
    private void LoadFunctionalVariableOptions()
    {
        functionalVariableSelectableOptions = SharedData.MyStreamModelFunctionList.Select(streamFunction => new FunctionalVariableOption
            {
                FunctionalCategory = Enum.TryParse<FunctionalCategory>(NormalizeEnumName(streamFunction.FunctionalCategory), true, out var functionalCategory) ? functionalCategory : FunctionalCategory.Hydrology,
                FunctionalVariable = Enum.TryParse<FunctionalVariableType>(NormalizeEnumName(streamFunction.FunctionalVariable), true, out var functionalVariable) ? functionalVariable : FunctionalVariableType.CatchmentHydrology,
                FunctionalStatement = streamFunction.FunctionalStatement,
                Physical = streamFunction.Physical,
                Chemical = streamFunction.Chemical,
                Biological = streamFunction.Biological,
                IsSelected = true
            }).ToList();
    }

    private List<MetricOption> allPossibleMetricOptions = new() { };

    private void LoadMetricsFromToolboxMetrics()
    {
        allPossibleMetricOptions = SharedData.MyToolboxMetricList.Select(toolboxMetric => new MetricOption
            {
                Assessment = toolboxMetric.Assessment,
                Year = toolboxMetric.Year,
                MetricShortName = toolboxMetric.MetricShortName,
                MetricName = toolboxMetric.MetricName,
                PerformanceStandard = toolboxMetric.PerformanceStandard,
                Method = toolboxMetric.Method,
                Tier = toolboxMetric.Tier,
                Physical = "",  // blank score
                Chemical = "", // blank score
                Biological = "",       // blank score
                ApplicableVariables = GetApplicableVariables(toolboxMetric), // dynamically calculate
                PerformanceStandardLookupTable = new List<LookupTableItem>() // Populate if applicable
            }).ToList();
    }


    private List<FunctionalVariableType> GetApplicableVariables(MyToolboxMetric toolboxMetric)
    {
        return typeof(MyToolboxMetric).GetProperties()
            .Where(prop => !string.IsNullOrEmpty(prop.GetValue(toolboxMetric)?.ToString()))
            .Select(prop => Enum.TryParse<FunctionalVariableType>(NormalizeEnumName(prop.Name), true, out var result) ? result : (FunctionalVariableType?)null)
            .Where(variable => variable.HasValue)
            .Select(variable => variable.Value)
            .ToList();
    }

    public enum FunctionalCategory
    {
        Hydrology,
        Hydraulics,
        Geomorphology,
        Physicochemical,
        Biology
    }

    public enum FunctionalVariableType
    {
        CatchmentHydrology,
        SurfaceWaterStorage,
        ReachInflow,
        FlowDuration,
        FlowAlteration,
        LowFlowDynamics,
        BaseflowDynamics,
        HighFlowDynamics,
        FloodplainConnectivity,
        HyporheicConnectivity,
        ChannelEvolution,
        LateralStability,
        PlanformChange,
        SedimentContinuity,
        LargeWood,
        BedComposition,
        LightAndThermalRegime,
        CarbonProcessing,
        NutrientCycling,
        WaterAndSoilQuality,
        HabitatProvision,
        PopulationSupport,
        CommunityDynamics,
        WatershedConnectivity
    }

    public class FunctionalCategoryItem
    {
        public FunctionalCategory FunctionalCategory { get; set; }
        public List<FunctionalVariable> FunctionalVariables { get; set; } = new();
    }

    public class FunctionalVariable
    {
        public FunctionalVariableType VariableType { get; set; }
        public List<MetricOption> Metrics { get; set; } = new();
        public bool IsSelected { get; set; } = true; // Default to true
    }

    public class FunctionalVariableOption
    {
        public FunctionalCategory FunctionalCategory { get; set; }
        public FunctionalVariableType FunctionalVariable { get; set; }
        public string FunctionalStatement { get; set; }
        public string Physical { get; set; }
        public string Chemical { get; set; }
        public string Biological { get; set; }
        public bool IsSelected { get; set; }
    }

    public class MetricOption
    {
        // New property that combines Assessment, Year, and MetricName
        public string UniqueID
        {
            get
            {
                return $"{Assessment} - {Year} - {MetricName}";
            }
        }

        public string selectedVariable { get; set; }
        public string selectedCategory { get; set; }
        public string Assessment { get; set; }
        public string Year { get; set; }
        public string MetricShortName { get; set; }
        public string MetricName { get; set; }
        public string PerformanceStandard { get; set; }
        public string Method { get; set; }
        public string Tier { get; set; }
        public bool IsSelected { get; set; }
        public double Score { get; set; }
        public string Physical { get; set; }
        public string Chemical { get; set; }
        public string Biological { get; set; }
        public List<FunctionalVariableType> ApplicableVariables { get; set; } = new();
        public List<LookupTableItem> PerformanceStandardLookupTable { get; set; } = new();
    }

    private double CalculateVariableScore(FunctionalVariable variable)
    {
        if (variable.Metrics.Count == 0)
        {
            return 0.0;
        }

        return Math.Round(variable.Metrics.Average(m => m.Score), 2);
    }


    private double CalculatePhysicalScore(FunctionalVariable variable)
    {
        var lookup = GetFunctionalVariableOption(variable.VariableType);
        double variableScore = CalculateVariableScore(variable);
        if (double.IsNaN(variableScore))
        {
            return double.NaN;
        }
        return lookup.Physical == "D" ? variableScore : lookup.Physical == "i" ? variableScore * 0.25 : double.NaN;
    }

    private double CalculateChemicalScore(FunctionalVariable variable)
    {
        var lookup = GetFunctionalVariableOption(variable.VariableType);
        double variableScore = CalculateVariableScore(variable);
        if (double.IsNaN(variableScore))
        {
            return double.NaN;
        }
        return lookup.Chemical == "D" ? variableScore : lookup.Chemical == "i" ? variableScore * 0.25 : double.NaN;
    }

    private double CalculateBiologicalScore(FunctionalVariable variable)
    {
        var lookup = GetFunctionalVariableOption(variable.VariableType);
        double variableScore = CalculateVariableScore(variable);
        if (double.IsNaN(variableScore))
        {
            return double.NaN;
        }
        return lookup.Biological == "D" ? variableScore : lookup.Biological == "i" ? variableScore * 0.25 : double.NaN;
    }



    private double GetPhysicalSubIndex(bool Index = true, bool total = false, bool max = false, bool dCount = false, bool iCount = false, bool ignoreVarUnselected = true, bool ignoreBlankMetrics = true)
    {
        double totalScore = 0.0;
        double maxScore = 0.0;
        int dVal = 0;
        int iVal = 0;

        foreach (var category in functionalCategoryItems)
        {
            foreach (var variable in category.FunctionalVariables)
            {
                // If ignoreVarUnselectedAndBlank Metrics is true, skip variables that are not selected or have no metrics, otherwise include all metrics
                @if (ignoreVarUnselected == true)
                {
                    @if (variable.IsSelected == false)
                    {
                        continue;
                    }
                }

                // If ignoreVarUnselectedAndBlank Metrics is true, skip variables that are not selected or have no metrics, otherwise include all metrics
                @if (ignoreBlankMetrics == true)
                {
                    @if (variable.Metrics.Count == 0)
                    {
                        continue;
                    }
                }

                var lookup = GetFunctionalVariableOption(variable.VariableType);
                if (lookup.Physical == "D")
                {
                    dVal += 1;
                    maxScore += 1.0;
                    totalScore += CalculatePhysicalScore(variable);
                }
                else if (lookup.Physical == "i")
                {
                    iVal += 1;
                    maxScore += 0.25;
                    totalScore += CalculatePhysicalScore(variable) * 0.25;
                }
            }
        }

        if (Index == true)
        {
            return maxScore > 0 ? Math.Round(totalScore / maxScore, 2) : 0.0;
        }
        else if (total == true)
        {
            return totalScore > 0 ? Math.Round(totalScore, 2) : 0.0;
        }
        else if (max == true)
        {
            return maxScore > 0 ? Math.Round(maxScore, 2) : 0.0;
        }
        else if (dCount == true)
        {
            return dVal;
        }
        else if (iCount == true)
        {
            return iVal;
        }
        else
        {
            return maxScore > 0 ? Math.Round(totalScore / maxScore, 2) : 0.0; // Default to index
        }
    }

    private double GetChemicalSubIndex(bool Index = true, bool total = false, bool max = false, bool dCount = false, bool iCount = false, bool ignoreVarUnselected = true, bool ignoreBlankMetrics = true)
    {
        double totalScore = 0.0;
        double maxScore = 0.0;
        int dVal = 0;
        int iVal = 0;

        foreach (var category in functionalCategoryItems)
        {
            foreach (var variable in category.FunctionalVariables)
            {
                // If ignoreVarUnselectedAndBlank Metrics is true, skip variables that are not selected or have no metrics, otherwise include all metrics
                @if (ignoreVarUnselected == true)
                {
                    @if (variable.IsSelected == false)
                    {
                        continue;
                    }
                }

                // If ignoreVarUnselectedAndBlank Metrics is true, skip variables that are not selected or have no metrics, otherwise include all metrics
                @if (ignoreBlankMetrics == true)
                {
                    @if (variable.Metrics.Count == 0)
                    {
                        continue;
                    }
                }

                var lookup = GetFunctionalVariableOption(variable.VariableType);
                if (lookup.Chemical == "D")
                {
                    dVal += 1;
                    maxScore += 1.0;
                    totalScore += CalculateChemicalScore(variable);
                }
                else if (lookup.Chemical == "i")
                {
                    iVal += 1;
                    maxScore += 0.25;
                    totalScore += CalculateChemicalScore(variable) * 0.25;
                }
            }
        }

        if (Index == true)
        {
            return maxScore > 0 ? Math.Round(totalScore / maxScore, 2) : 0.0;
        }
        else if (total == true)
        {
            return totalScore > 0 ? Math.Round(totalScore, 2) : 0.0;
        }
        else if (max == true)
        {
            return maxScore > 0 ? Math.Round(maxScore, 2) : 0.0;
        }
        else if (dCount == true)
        {
            return dVal;
        }
        else if (iCount == true)
        {
            return iVal;
        }
        else
        {
            return maxScore > 0 ? Math.Round(totalScore / maxScore, 2) : 0.0; // Default to index
        }
    }

    private double GetBiologicalSubIndex(bool Index = true, bool total = false, bool max = false, bool dCount = false, bool iCount = false, bool ignoreVarUnselected = true, bool ignoreBlankMetrics = true)
    {
        double totalScore = 0.0;
        double maxScore = 0.0;
        int dVal = 0;
        int iVal = 0;

        foreach (var category in functionalCategoryItems)
        {
            foreach (var variable in category.FunctionalVariables)
            {
                // If ignoreVarUnselectedAndBlank Metrics is true, skip variables that are not selected or have no metrics, otherwise include all metrics
                @if (ignoreVarUnselected == true)
                {
                    @if (variable.IsSelected == false)
                    {
                        continue;
                    }
                }

                // If ignoreVarUnselectedAndBlank Metrics is true, skip variables that are not selected or have no metrics, otherwise include all metrics
                @if (ignoreBlankMetrics == true)
                {
                    @if (variable.Metrics.Count == 0)
                    {
                        continue;
                    }
                }

                var lookup = GetFunctionalVariableOption(variable.VariableType);
                if (lookup.Biological == "D")
                {
                    dVal += 1;
                    maxScore += 1.0;
                    totalScore += CalculateBiologicalScore(variable);
                }
                else if (lookup.Biological == "i")
                {
                    iVal += 1;
                    maxScore += 0.25;
                    totalScore += CalculateBiologicalScore(variable) * 0.25;
                }
            }
        }

        if (Index == true)
        {
            return maxScore > 0 ? Math.Round(totalScore / maxScore, 2) : 0.0;
        }
        else if (total == true)
        {
            return totalScore > 0 ? Math.Round(totalScore, 2) : 0.0;
        }
        else if (max == true)
        {
            return maxScore > 0 ? Math.Round(maxScore, 2) : 0.0;
        }
        else if (dCount == true)
        {
            return dVal;
        }
        else if (iCount == true)
        {
            return iVal;
        }
        else
        {
            return maxScore > 0 ? Math.Round(totalScore / maxScore, 2) : 0.0; // Default to index
        }

    }

    public double GetEcosystemConditionIndex()
    {
        double totalScore = (GetPhysicalSubIndex(true) + GetChemicalSubIndex(true, false) + GetBiologicalSubIndex(true, false)) / 3.0;
        return Math.Round(totalScore, 2);
    }

    private string GetSubIndexScore(string type, double subIndexScore)
    {
        return functionalCategoryItems.Any(category => category.FunctionalVariables.Any(variable => variable.Metrics.Count > 0 && (GetFunctionalVariableOption(variable.VariableType).GetType().GetProperty(type).GetValue(GetFunctionalVariableOption(variable.VariableType)) as string == "D" || GetFunctionalVariableOption(variable.VariableType).GetType().GetProperty(type).GetValue(GetFunctionalVariableOption(variable.VariableType)) as string == "i"))) ? subIndexScore.ToString() : "-";
    }

    private string GetEcosystemConditionIndexOrMissing()
    {
        var physicalSubIndex = functionalCategoryItems.Any(category => category.FunctionalVariables.Any(variable => variable.Metrics.Count > 0 && (GetFunctionalVariableOption(variable.VariableType).Physical == "D" || GetFunctionalVariableOption(variable.VariableType).Physical == "i"))) ? GetPhysicalSubIndex() : double.NaN;
        var chemicalSubIndex = functionalCategoryItems.Any(category => category.FunctionalVariables.Any(variable => variable.Metrics.Count > 0 && (GetFunctionalVariableOption(variable.VariableType).Chemical == "D" || GetFunctionalVariableOption(variable.VariableType).Chemical == "i"))) ? GetChemicalSubIndex() : double.NaN;
        var biologicalSubIndex = functionalCategoryItems.Any(category => category.FunctionalVariables.Any(variable => variable.Metrics.Count > 0 && (GetFunctionalVariableOption(variable.VariableType).Biological == "D" || GetFunctionalVariableOption(variable.VariableType).Biological == "i"))) ? GetBiologicalSubIndex() : double.NaN;

        if (double.IsNaN(physicalSubIndex) || double.IsNaN(chemicalSubIndex) || double.IsNaN(biologicalSubIndex))
        {
            return "-";
        }
        else
        {
            return GetEcosystemConditionIndex().ToString();
        }
    }

    private FunctionalVariableOption GetFunctionalVariableOption(FunctionalVariableType variableType)
    {
        return functionalVariableSelectableOptions.FirstOrDefault(option => option.FunctionalVariable == variableType);
    }

    private string GetScoreText(double score, string designation, int MetricsCount, bool onlyDesignation = false)
    {
        //if onlyDesignation=true then return the designation if it is not null or empty
        if (onlyDesignation)
        {
            if (string.IsNullOrEmpty(designation))
            {
                return "";
            }
            else
            {
                return $"{designation}";
            }
        }

        if (MetricsCount == 0)
        {
            @if (string.IsNullOrEmpty(designation))
            {
                return "";
            }
            else
            {
                return $"{designation}"; //+ " (-)";
            }
        }
        if (double.IsNaN(score))
        {
            @if (string.IsNullOrEmpty(designation))
            {
                return "-";
            }
            else
            {
                return $"{designation}";
            }
        }
        return $"{designation} ({score:0.00})";
    }

    private void OnEditCategoryClick(FunctionalCategoryItem categoryItem)
    {


        selectedCategoryItem = categoryItem;

        // Filter options to only show those related to the selected category
        filteredVariableSelectableOptionsForDialog = functionalVariableSelectableOptions.Where(option => option.FunctionalCategory == categoryItem.FunctionalCategory).ToList();

        // Iterate over filtered options and set IsSelected if the variable has IsSelected set to true
        foreach (var option in filteredVariableSelectableOptionsForDialog)
        {
            option.IsSelected = categoryItem.FunctionalVariables.Any(v => v.VariableType == option.FunctionalVariable && v.IsSelected);
        }

        editVariableDialogVisible = true;
    }

    private void OnEditVariableClick(FunctionalVariable variable)
    {

        selectedCategoryItem = functionalCategoryItems.FirstOrDefault(category => category.FunctionalVariables.Contains(variable));

        // Filter options to only show those related to the selected category
        filteredVariableSelectableOptionsForDialog = functionalVariableSelectableOptions
            .Where(option => option.FunctionalCategory == selectedCategoryItem.FunctionalCategory)
            .ToList();

        // Iterate over filtered options and set IsSelected if the variable is part of the selected category and is selected
        foreach (var option in filteredVariableSelectableOptionsForDialog)
        {
            option.IsSelected = selectedCategoryItem.FunctionalVariables
                .Any(v => v.VariableType == option.FunctionalVariable && v.IsSelected);
        }

        editVariableDialogVisible = true;
    }

    private void OnEditMetricClick(FunctionalVariable variable)
    {

        selectedVariable = variable;

        // Filter metric options to show only those relevant to the selected variable
        filteredMetricOptionsForDialog = allPossibleMetricOptions.Where(option => option.ApplicableVariables.Contains(selectedVariable.VariableType)).ToList();

        // Set the selected state based on existing metrics for the variable
        foreach (var option in filteredMetricOptionsForDialog)
        {
            option.IsSelected = selectedVariable.Metrics.Any(m => m.UniqueID == option.UniqueID);
        }

        editMetricDialogVisible = true;

    }

    private void OnEditScoreClick(MetricOption metric)
    {
        selectedMetric = metric;
        OnEditScoreDialogOpened();
        editScoreDialogVisible = true;
        OnEditScoreDialogAfterRender();

    }

    private void SaveScore()
    {

        UpdateTableItems();
        editScoreDialogVisible = false;
        originalScore = null; // Clear original score after saving
    }

    private void SaveSelectedVariables()
    {
        if (selectedCategoryItem != null)
        {
            selectedCategoryItem.FunctionalVariables.Clear();
            foreach (var option in filteredVariableSelectableOptionsForDialog)
            {
                if (option.IsSelected)
                {
                    selectedCategoryItem.FunctionalVariables.Add(new FunctionalVariable
                        {
                            VariableType = option.FunctionalVariable,
                            IsSelected = true
                        });
                }
                else
                {
                    selectedCategoryItem.FunctionalVariables.Add(new FunctionalVariable
                        {
                            VariableType = option.FunctionalVariable,
                            IsSelected = false
                        });
                }
            }
        }

        UpdateTableItems();
        editVariableDialogVisible = false;

    }
    private void SaveSelectedMetrics()
    {
        if (selectedVariable != null)
        {
            // Remove metrics that were unselected
            selectedVariable.Metrics.RemoveAll(m => !filteredMetricOptionsForDialog.Any(option => option.UniqueID == m.UniqueID && option.IsSelected));

            // Add metrics that were newly selected
            foreach (var option in filteredMetricOptionsForDialog)
            {
                if (option.IsSelected && !selectedVariable.Metrics.Any(m => m.UniqueID == option.UniqueID))
                {
                    // Create a new instance of MetricOption to avoid shared references between variables
                    selectedVariable.Metrics.Add(new MetricOption
                        {
                            selectedCategory = functionalCategoryItems.FirstOrDefault(c => c.FunctionalVariables.Contains(selectedVariable))?.FunctionalCategory.ToString(),
                            selectedVariable = selectedVariable.VariableType.ToString(),
                            Assessment = option.Assessment,
                            Year = option.Year,
                            MetricShortName = option.MetricShortName,
                            MetricName = option.MetricName,
                            PerformanceStandard = option.PerformanceStandard,
                            Method = option.Method,
                            Tier = option.Tier,
                            Score = option.Score,
                            Physical = option.Physical,
                            Chemical = option.Chemical,
                            Biological = option.Biological,
                            ApplicableVariables = new List<FunctionalVariableType>(option.ApplicableVariables)
                        });
                }
            }
        }

        UpdateTableItems();
        editMetricDialogVisible = false;

    }


    private string GetFunctionalCategory(FunctionalVariableType variableType)
    {
        foreach (var category in functionalCategoryItems)
        {
            if (category.FunctionalVariables.Any(v => v.VariableType == variableType))
            {
                return category.FunctionalCategory.ToString();
            }
        }
        return string.Empty;
    }

    private void CloseEditVariableDialog()
    {
        editVariableDialogVisible = false;
    }

    private void CloseEditMetricDialog()
    {
        editMetricDialogVisible = false;
    }

    private void CancelEditScore()
    {
        if (selectedMetric != null && originalScore.HasValue)
        {
            selectedMetric.Score = originalScore.Value;
        }
        editScoreDialogVisible = false;
        originalScore = null; // Clear original score after cancelling
    }



    private bool IsFirstVariableRow(FunctionalCategoryItem category, FunctionalVariable variable)
    {
        bool res = category.FunctionalVariables.First() == variable;
        return res;
    }

    private bool IsFirstMetricRow(FunctionalVariable variable, MetricOption metric)
    {
        bool res = variable.Metrics.Count == 0 || variable.Metrics.First() == metric;
        return res;
    }

    private int GetRowSpanForCategory(FunctionalCategoryItem category)
    {
        int rowSpan = 0;
        foreach (var variable in category.FunctionalVariables)
        {
            rowSpan += Math.Max(1, variable.Metrics.Count);
        }
        return rowSpan;
    }


    private int GetRowSpanForVariable(FunctionalVariable variable)
    {
        return Math.Max(1, variable.Metrics.Count);
    }


    public class TableItem
    {
        public FunctionalCategoryItem Category { get; set; }
        public FunctionalVariable Variable { get; set; }
        public MetricOption Metric { get; set; }

        public string GetFunctionalVariableStatement(List<FunctionalVariableOption> fvo)
        {
            var option = fvo.FirstOrDefault(opt => opt.FunctionalVariable == Variable.VariableType);
            return option != null ? option.FunctionalStatement : "Statement not found";
        }
    }



    private void UpdateTableItems()
    {
        tableItems = GenerateTableItems();
        StateHasChanged();
    }

    private List<TableItem> GenerateTableItems()
    {
        var newTableItems = new List<TableItem>();

        foreach (var category in functionalCategoryItems)
        {
            foreach (var variable in category.FunctionalVariables)
            {
                if (variable.Metrics.Count == 0)
                {
                    newTableItems.Add(new TableItem { Category = category, Variable = variable, Metric = new MetricOption() });
                }
                else
                {
                    foreach (var metric in variable.Metrics)
                    {
                        newTableItems.Add(new TableItem { Category = category, Variable = variable, Metric = metric });
                    }
                }
            }
        }

        return newTableItems;
    }

    private List<TableItem> GetTableItems()
    {
        return tableItems;
    }

    // private List<TableItem> GetTableItems()
    // {
    //     var tableItems = new List<TableItem>();

    //     foreach (var category in functionalCategoryItems)
    //     {
    //         foreach (var variable in category.FunctionalVariables)
    //         {
    //             if (variable.Metrics.Count == 0)
    //             {
    //                 tableItems.Add(new TableItem { Category = category, Variable = variable, Metric = new MetricOption() });
    //             }
    //             else
    //             {
    //                 foreach (var metric in variable.Metrics)
    //                 {
    //                     tableItems.Add(new TableItem { Category = category, Variable = variable, Metric = metric });
    //                 }
    //             }
    //         }
    //     }


    //     return tableItems;
    // }


    private MyStreamModelFunction[]? MyStreamModelFunctionArray;
    private MyToolboxMetric[]? MyToolboxMetricArray;
    public async Task GetApiData()
    {
        try
        {
            if (string.IsNullOrEmpty(SharedData.csvStreamModelFunctionContent))
            {
                //var csvUrl = "https://raw.githubusercontent.com/USACE-WRISES/RiverEngineeringResourcesDB/refs/heads/main/Assessments.csv";
                var csvUrl = "https://usace-wrises.github.io/RiverEngineeringResourcesDB/StreamModelFunctions.csv";
                // Append a timestamp to the URL to prevent caching
                csvUrl += "?t=" + DateTime.UtcNow.Ticks;
                SharedData.csvStreamModelFunctionContent = await Http.GetStringAsync(csvUrl);
            }

            if (string.IsNullOrEmpty(SharedData.csvToolboxMetricContent))
            {
                //var csvUrl = "https://raw.githubusercontent.com/USACE-WRISES/RiverEngineeringResourcesDB/refs/heads/main/Assessments.csv";
                var csvUrl = "https://usace-wrises.github.io/RiverEngineeringResourcesDB/MetricToolbox.csv";
                // Append a timestamp to the URL to prevent caching
                csvUrl += "?t=" + DateTime.UtcNow.Ticks;
                SharedData.csvToolboxMetricContent = await Http.GetStringAsync(csvUrl);
            }

            // Convert CSV to JSON
            var jsonLines1 = SharedFunctions.CsvToJsonFromString2(SharedData.csvStreamModelFunctionContent, ',');
            string jsonContent1 = "[" + string.Join(",\n", jsonLines1) + "]";
            //Console.WriteLine(jsonContent);

            // Convert CSV to JSON
            var jsonLines2 = SharedFunctions.CsvToJsonFromString2(SharedData.csvToolboxMetricContent, ',');
            string jsonContent2 = "[" + string.Join(",\n", jsonLines2) + "]";
            //Console.WriteLine(jsonContent);

            // Deserialize the JSON content into MyResourcesArray
            MyStreamModelFunctionArray = JsonSerializer.Deserialize<MyStreamModelFunction[]>(jsonContent1);
            MyToolboxMetricArray = JsonSerializer.Deserialize<MyToolboxMetric[]>(jsonContent2);
        }
        catch (Exception ex)
        {
            // Show a popup warning using JavaScript interop
            SharedData.assessmentErrorMessage = "Failed to download or convert CSV.";

            //await module.InvokeVoidAsync("alert", "Failed to download or convert CSV. Using fallback JSON data.");

            // Load the fallback JSON from the local file
            //MyResourcesArray = await Http.GetFromJsonAsync<MyAssessmentResource[]>("sample-data/SAR20240426.json");
            //MyResourcesArray = null;
        }

        // Convert the array to a list for further use
        SharedData.MyStreamModelFunctionList = MyStreamModelFunctionArray.ToList();
        SharedData.MyToolboxMetricList = MyToolboxMetricArray.ToList();

        string f = "hi there";

        LoadData();

    }


    private bool isDataLoaded = false; // Flag to indicate if data is loaded
    public void LoadData()
    {
        LoadFunctionalCategoryItems();
        LoadFunctionalVariableOptions();
        LoadMetricsFromToolboxMetrics();

        isDataLoaded = true;

        UpdateTableItems();
    }


    private async Task ExportData()
    {
        // Iterate through functionalCategoryItems and collect selected metrics
        var selectedMetrics = new List<MetricOption>();
        foreach (var category in functionalCategoryItems)
        {
            foreach (var variable in category.FunctionalVariables)
            {
                selectedMetrics.AddRange(variable.Metrics);
            }
        }


        // Add dummy metrics for tracking selected variables if not already captured
        foreach (var option in functionalVariableSelectableOptions)
        {
            if (option.IsSelected && !selectedMetrics.Any(m => m.selectedVariable == option.FunctionalVariable.ToString()))
            {
                selectedMetrics.Add(new MetricOption
                    {
                        selectedCategory = option.FunctionalCategory.ToString(),
                        selectedVariable = option.FunctionalVariable.ToString(),
                        Assessment = "",
                        Year = "",
                        MetricShortName = "",
                        MetricName = "",
                        PerformanceStandard = "",
                        Method = "",
                        Tier = "",
                        IsSelected = true,
                        Score = 0,
                        Physical = "",
                        Chemical = "",
                        Biological = ""
                    });
            }
        }

        var records = selectedMetrics.Select(metric => new
        {
            metric.selectedCategory,
            metric.selectedVariable,
            metric.Assessment,
            metric.Year,
            metric.MetricShortName,
            metric.MetricName,
            metric.PerformanceStandard,
            metric.IsSelected,
            metric.Method,
            metric.Tier,
            metric.Score,
            metric.Physical,
            metric.Chemical,
            metric.Biological
        }).ToList();

        string csvData;
        using (var writer = new StringWriter())
        using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
        {
            csv.WriteRecords(records);
            csvData = writer.ToString();
        }

        string fileName = string.IsNullOrEmpty(streamModelName) ? "new model.csv" : streamModelName + ".csv";
        await module.InvokeVoidAsync("downloadCsv", fileName, csvData);

    }

    private IJSObjectReference? module;
    private string? result;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Configuration.VisibleStateDuration = 1000;
            Snackbar.Configuration.ShowTransitionDuration = 500;
            Snackbar.Configuration.HideTransitionDuration = 500;

            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./assess.js");
            if (module != null)
            {
                result = await module.InvokeAsync<string>("load");
                await module.InvokeVoidAsync("initializeDotnetHelper", DotNetObjectReference.Create(this));

            }
        }
    }



    // private async Task HandleFileChange(InputFileChangeEventArgs e)
    // {
    //     var file = e.File;
    //     using var stream = file.OpenReadStream();
    //     using var reader = new StreamReader(stream);

    //     var content = await reader.ReadToEndAsync();
    //     using (var csv = new CsvReader(new StringReader(content), CultureInfo.InvariantCulture))
    //     {
    //         var records = csv.GetRecords<MetricOption>().ToList();
    //         metricOptions = records;
    //     }

    //     StateHasChanged();
    // }
    private async void OnImportClick()
    {
        await module.InvokeVoidAsync("triggerFileInputClick", "fileUploadInput");
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {


        var file = e.File;
        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);
        var importedMetrics = new List<MetricOption>();

        var content = await reader.ReadToEndAsync();

        //console.log(`File selected: ${file.name}`);
        // Additional processing logic goes here

        try
        {
            using (var csv = new CsvReader(new StringReader(content), CultureInfo.InvariantCulture))
            {
                importedMetrics = csv.GetRecords<MetricOption>().ToList();
            }

            if (importedMetrics == null || importedMetrics.Count == 0)
            {
                Snackbar.Add("Uploaded file is invalid or empty.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // console.error("Error loading CSV data: " + ex.message);

            Snackbar.Add("Error loading stream model.", Severity.Error);
            return;
        }

        // Clear existing data
        filteredMetricOptionsForDialog.Clear();
        filteredVariableSelectableOptionsForDialog.Clear();

        //Iterate through functoinalCategoryItems and clear the selected metrics
        foreach (var category in functionalCategoryItems)
        {
            foreach (var variable in category.FunctionalVariables)
            {
                variable.Metrics.Clear();
                variable.IsSelected = false;
            }
        }
        //iterate through functionalVariables and clear their selection
        foreach (var option in functionalVariableSelectableOptions)
        {
            option.IsSelected = false;
        }



        // Update the stream model name to the name in the CSV (assuming CSV contains such information)
        streamModelName = Path.GetFileNameWithoutExtension(file.Name);
        //If streammodelname is null or empty give it a defualt value of Stream Model
        if (string.IsNullOrEmpty(streamModelName))
        {
            streamModelName = "Stream Model";
        }

        // Populate functional categories and variables
        functionalCategoryItems = new List<FunctionalCategoryItem>();
        foreach (var metric in importedMetrics)
        {
            selectedCategoryItem = functionalCategoryItems.FirstOrDefault(c => c.FunctionalCategory.ToString() == metric.selectedCategory);
            var variable = selectedCategoryItem.FunctionalVariables.FirstOrDefault(v => v.VariableType.ToString() == metric.selectedVariable);
            @if (variable != null)
            {
                variable.IsSelected = true;
            }

            // Filter options to only show those related to the selected category
            filteredVariableSelectableOptionsForDialog = functionalVariableSelectableOptions.Where(option => option.FunctionalCategory == selectedCategoryItem.FunctionalCategory).ToList();

            // Iterate over filtered options and set IsSelected if the variable is part of the selected category
            foreach (var option in filteredVariableSelectableOptionsForDialog)
            {
                option.IsSelected = selectedCategoryItem.FunctionalVariables.Any(v => v.VariableType == variable.VariableType);
                //option.FunctionalVariable.Metrics.Clear();

            }


            // Add metrics to the corresponding variable
            if (!variable.Metrics.Any(m => m.UniqueID == metric.UniqueID))
            {
                variable.Metrics.Add(new MetricOption
                    {
                        selectedCategory = metric.selectedCategory,
                        selectedVariable = metric.selectedVariable,
                        Assessment = metric.Assessment,
                        Year = metric.Year,
                        MetricShortName = metric.MetricShortName,
                        MetricName = metric.MetricName,
                        PerformanceStandard = metric.PerformanceStandard,
                        Method = metric.Method,
                        Tier = metric.Tier,
                        Score = metric.Score,
                        Physical = metric.Physical,
                        Chemical = metric.Chemical,
                        Biological = metric.Biological,
                        ApplicableVariables = new List<FunctionalVariableType>(metric.ApplicableVariables)
                    });
            }
        }

    }


    private async Task ExportXlsx()
    {
        // Disable UI or show loading indicator here (e.g., Snackbar or MudProgressCircular)

        Snackbar.Add("Exporting model and starting download.", Severity.Normal);

        await Task.Run(() =>
        {
            using var workbook = new ClosedXML.Excel.XLWorkbook();
            var worksheet = workbook.Worksheets.Add("Stream Model Data");

            // Set header row
            worksheet.Cell(1, 1).Value = "Functional Category";
            worksheet.Cell(1, 2).Value = "Functional Variable";
            worksheet.Cell(1, 3).Value = "Metric Name";
            worksheet.Cell(1, 4).Value = "Metric Score (0-1.0)";
            worksheet.Cell(1, 5).Value = "Variable Score (0-1.0)";
            worksheet.Cell(1, 6).Value = "Physical";
            worksheet.Cell(1, 7).Value = "Chemical";
            worksheet.Cell(1, 8).Value = "Biological";

            // Center alignment for score columns
            worksheet.Column(4).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Center;
            worksheet.Column(5).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Center;
            worksheet.Column(6).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Center;
            worksheet.Column(7).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Center;
            worksheet.Column(8).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Center;


            // Set number format to 2 decimal places for score columns
            worksheet.Column(4).Style.NumberFormat.Format = "0.00";
            worksheet.Column(5).Style.NumberFormat.Format = "0.00";
            worksheet.Column(6).Style.NumberFormat.Format = "0.00";
            worksheet.Column(7).Style.NumberFormat.Format = "0.00";
            worksheet.Column(8).Style.NumberFormat.Format = "0.00";

            // Add data rows
            var row = 2;
            var currFunctionalCategory = string.Empty;
            var currFunctionalVariable = string.Empty;
            int trackingFirstRowOfVariable = 1;
            int trackingFirstRowOfCategory = 1;

            foreach (var tableItem in GetTableItems())
            {


                worksheet.Cell(row, 3).Value = tableItem.Metric.MetricName;

                //if metric.score is blank or empty then set worksheet.cell(row,4) to blank
                if (string.IsNullOrEmpty(tableItem.Metric.MetricName))
                {
                    worksheet.Cell(row, 4).Value = "";
                }
                else
                {
                    worksheet.Cell(row, 4).Value = tableItem.Metric.Score;
                }

                if (tableItem.Category.FunctionalCategory.ToString() != currFunctionalCategory)
                {
                    trackingFirstRowOfCategory = row;
                    worksheet.Cell(row, 1).Value = tableItem.Category.FunctionalCategory.ToString();
                    currFunctionalCategory = tableItem.Category.FunctionalCategory.ToString();
                }
                else
                {
                    // Merge the functional category cell with the row above it
                    worksheet.Range(trackingFirstRowOfCategory, 1, row, 1).Merge();
                }
                if (currFunctionalVariable != tableItem.Variable.VariableType.ToString())
                {
                    trackingFirstRowOfVariable = row;
                    worksheet.Cell(row, 2).Value = GetFormattedVariableType(tableItem.Variable.VariableType); //Formatted variable name
                    currFunctionalVariable = tableItem.Variable.VariableType.ToString();

                    // Average metric score for the variable
                    if (tableItem.Variable.IsSelected)
                    {
                        worksheet.Cell(row, 5).FormulaA1 = "IF(COUNTBLANK(D" + trackingFirstRowOfVariable + ":D" + row + ") > 0, \"-\", AVERAGE(D" + trackingFirstRowOfVariable + ":D" + row + "))";
                    }
                    else
                    {
                        worksheet.Cell(row, 5).Value = "-";
                    }


                    // Add formulas for Physical, Chemical, and Biological, with multipliers based on D, i, or empty
                    var physicalOption = GetFunctionalVariableOption(tableItem.Variable.VariableType).Physical;
                    var chemicalOption = GetFunctionalVariableOption(tableItem.Variable.VariableType).Chemical;
                    var biologicalOption = GetFunctionalVariableOption(tableItem.Variable.VariableType).Biological;

                    var variableScore = $"E{row}";

                    // Physical
                    if (physicalOption == "D")
                    {
                        worksheet.Cell(row, 6).FormulaA1 = $"IF(E{row}=\"-\", \"D\", \"D (\" & ROUND(E{row}, 2) & \")\")";
                    }
                    else if (physicalOption == "i")
                    {
                        worksheet.Cell(row, 6).FormulaA1 = $"IF(E{row}=\"-\", \"i\", \"i (\" & ROUND(E{row}*0.25, 2) & \")\")";
                    }
                    else
                    {
                        worksheet.Cell(row, 6).Value = string.Empty; // Leave cell blank if empty
                    }

                    // Chemical
                    if (chemicalOption == "D")
                    {
                        worksheet.Cell(row, 7).FormulaA1 = $"IF(E{row}=\"-\", \"D\", \"D (\" & ROUND(E{row}, 2) & \")\")";
                    }
                    else if (chemicalOption == "i")
                    {
                        worksheet.Cell(row, 7).FormulaA1 = $"IF(E{row}=\"-\", \"i\", \"i (\" & ROUND(E{row}*0.25, 2) & \")\")";
                    }
                    else
                    {
                        worksheet.Cell(row, 7).Value = string.Empty; // Leave cell blank if empty
                    }

                    // Biological
                    if (biologicalOption == "D")
                    {
                        worksheet.Cell(row, 8).FormulaA1 = $"IF(E{row}=\"-\", \"D\", \"D (\" & ROUND(E{row}, 2) & \")\")";
                    }
                    else if (biologicalOption == "i")
                    {
                        worksheet.Cell(row, 8).FormulaA1 = $"IF(E{row}=\"-\", \"i\", \"i (\" & ROUND(E{row}*0.25, 2) & \")\")";
                    }
                    else
                    {
                        worksheet.Cell(row, 8).Value = string.Empty; // Leave cell blank if empty
                    }

                }
                else
                {
                    // Average metric score for the variable across the new row
                    if (tableItem.Variable.IsSelected)
                    {
                        worksheet.Cell(trackingFirstRowOfVariable, 5).FormulaA1 = $"IF(COUNTBLANK(D" + trackingFirstRowOfVariable + ":D" + row + ") > 0, \"-\", AVERAGE(D" + trackingFirstRowOfVariable + ":D" + row + "))";
                    }
                    else
                    {
                        worksheet.Cell(trackingFirstRowOfVariable, 5).Value = "-";
                    }

                    // Merge the functional variable cell with the row above it
                    worksheet.Range(trackingFirstRowOfVariable, 2, row, 2).Merge();

                    // Merge the variable score, biological, chemical, and physical cells with the row above it
                    worksheet.Range(trackingFirstRowOfVariable, 5, row, 5).Merge();
                    worksheet.Range(trackingFirstRowOfVariable, 6, row, 6).Merge();
                    worksheet.Range(trackingFirstRowOfVariable, 7, row, 7).Merge();
                    worksheet.Range(trackingFirstRowOfVariable, 8, row, 8).Merge();
                }

                // Set row background color based on Functional Category
                var rangeFirstCol = worksheet.Range(row, 1, row, 1);
                switch (tableItem.Category.FunctionalCategory)
                {
                    case FunctionalCategory.Hydrology:
                        rangeFirstCol.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#D9E1F2");
                        break;
                    case FunctionalCategory.Hydraulics:
                        rangeFirstCol.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#B4C6E7");
                        break;
                    case FunctionalCategory.Geomorphology:
                        rangeFirstCol.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#FCE4D6");
                        break;
                    case FunctionalCategory.Physicochemical:
                        rangeFirstCol.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#FFF2CC");
                        break;
                    case FunctionalCategory.Biology:
                        rangeFirstCol.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#E2EFDA");
                        break;
                    default:
                        break;
                }

                var range2 = worksheet.Range(row, 2, row, 8);
                if (!tableItem.Variable.IsSelected)
                {
                    range2.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.LightGray;

                }


                else
                {
                    switch (tableItem.Category.FunctionalCategory)
                    {
                        case FunctionalCategory.Hydrology:
                            range2.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#D9E1F2");
                            break;
                        case FunctionalCategory.Hydraulics:
                            range2.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#B4C6E7");
                            break;
                        case FunctionalCategory.Geomorphology:
                            range2.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#FCE4D6");
                            break;
                        case FunctionalCategory.Physicochemical:
                            range2.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#FFF2CC");
                            break;
                        case FunctionalCategory.Biology:
                            range2.Style.Fill.BackgroundColor = ClosedXML.Excel.XLColor.FromHtml("#E2EFDA");
                            break;
                        default:
                            break;
                    }
                }

                currFunctionalCategory = tableItem.Category.FunctionalCategory.ToString();
                currFunctionalVariable = tableItem.Variable.VariableType.ToString();

                // Set all borders for the row
                rangeFirstCol.Style.Border.OutsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
                rangeFirstCol.Style.Border.InsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;

                range2.Style.Border.OutsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
                range2.Style.Border.InsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;

                row++;
            }
            var rangeFirstCol2 = worksheet.Range(1, 1, row - 1, 1);
            rangeFirstCol2.Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Center;
            rangeFirstCol2.Style.Alignment.Vertical = ClosedXML.Excel.XLAlignmentVerticalValues.Top;

            var rangeSecCol2 = worksheet.Range(1, 2, row - 1, 2);
            rangeSecCol2.Style.Alignment.Vertical = ClosedXML.Excel.XLAlignmentVerticalValues.Center;

            var rangeScoresCol2 = worksheet.Range(1, 5, row - 1, 8);
            rangeScoresCol2.Style.Alignment.Vertical = ClosedXML.Excel.XLAlignmentVerticalValues.Center;

            var rangeTop = worksheet.Range(1, 1, 1, 8);
            rangeTop.Style.Border.OutsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
            rangeTop.Style.Border.InsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;

            var rangeIndices = worksheet.Range(row, 6, row + 5, 8);
            rangeIndices.Style.Border.OutsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;
            rangeIndices.Style.Border.InsideBorder = ClosedXML.Excel.XLBorderStyleValues.Thin;

            //make the effect counts integers
            worksheet.Range(row + 1, 6, row + 2, 8).Style.NumberFormat.Format = "0";


            // Add formulas to calculate sub-totals for Physical, Chemical, and Biological columns
            worksheet.Cell(row, 5).Value = "Weighted Score Total";
            worksheet.Cell(row, 5).Style.Font.Bold = true;
            worksheet.Cell(row, 5).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;
            worksheet.Cell(row, 6).AsRange().FormulaArrayA1 = "=SUMPRODUCT(IFERROR(--MID(F2:F" + (row - 1) + ", FIND(\"(\", F2:F" + (row - 1) + ") + 1, FIND(\")\", F2:F" + (row - 1) + ") - FIND(\"(\", F2:F" + (row - 1) + ") - 1), 0))";
            worksheet.Cell(row, 7).AsRange().FormulaArrayA1 = "=SUMPRODUCT(IFERROR(--MID(G2:G" + (row - 1) + ", FIND(\"(\", G2:G" + (row - 1) + ") + 1, FIND(\")\", G2:G" + (row - 1) + ") - FIND(\"(\", G2:G" + (row - 1) + ") - 1), 0))";
            worksheet.Cell(row, 8).AsRange().FormulaArrayA1 = "=SUMPRODUCT(IFERROR(--MID(H2:H" + (row - 1) + ", FIND(\"(\", H2:H" + (row - 1) + ") + 1, FIND(\")\", H2:H" + (row - 1) + ") - FIND(\"(\", H2:H" + (row - 1) + ") - 1), 0))";


            // Add rows to calculate the number of D's and i's in each of the columns
            worksheet.Cell(row + 1, 5).Value = "Direct Effect";
            worksheet.Cell(row + 1, 5).Style.Font.Bold = true;
            worksheet.Cell(row + 1, 5).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;
            worksheet.Cell(row + 1, 6).FormulaA1 = "=COUNTIF(F2:F" + (row - 1) + ", \"D (*\")";
            worksheet.Cell(row + 1, 7).FormulaA1 = "=COUNTIF(G2:G" + (row - 1) + ", \"D (*\")";
            worksheet.Cell(row + 1, 8).FormulaA1 = "=COUNTIF(H2:H" + (row - 1) + ", \"D (*\")";

            worksheet.Cell(row + 2, 5).Value = "Indirect Effect";
            worksheet.Cell(row + 2, 5).Style.Font.Bold = true;
            worksheet.Cell(row + 2, 5).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;
            worksheet.Cell(row + 2, 6).FormulaA1 = "=COUNTIF(F2:F" + (row - 1) + ", \"i (*\")";
            worksheet.Cell(row + 2, 7).FormulaA1 = "=COUNTIF(G2:G" + (row - 1) + ", \"i (*\")";
            worksheet.Cell(row + 2, 8).FormulaA1 = "=COUNTIF(H2:H" + (row - 1) + ", \"i (*\")";

            // Set formulas for calculating maximum possible scores in Physical, Chemical, and Biological columns
            worksheet.Cell(row + 3, 5).Value = "Max Score";
            worksheet.Cell(row + 3, 5).Style.Font.Bold = true;
            worksheet.Cell(row + 3, 5).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;
            worksheet.Cell(row + 3, 6).FormulaA1 = "=(F" + (row + 1) + " * 1) + (F" + (row + 2) + " * 0.25)";
            worksheet.Cell(row + 3, 7).FormulaA1 = "=(G" + (row + 1) + " * 1) + (G" + (row + 2) + " * 0.25)";
            worksheet.Cell(row + 3, 8).FormulaA1 = "=(H" + (row + 1) + " * 1) + (H" + (row + 2) + " * 0.25)";


            // Add formulas to calculate averages for Physical, Chemical, and Biological columns
            worksheet.Cell(row + 4, 5).Value = "Condition Sub-Index";
            worksheet.Cell(row + 4, 5).Style.Font.Bold = true;
            worksheet.Cell(row + 4, 5).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;
            worksheet.Cell(row + 4, 6).FormulaA1 = "=F" + (row) + " / F" + (row + 3);
            worksheet.Cell(row + 4, 7).FormulaA1 = "=G" + (row) + " / G" + (row + 3);
            worksheet.Cell(row + 4, 8).FormulaA1 = "=H" + (row) + " / H" + (row + 3);

            // Add the overall average across Physical, Chemical, and Biological in the next row
            worksheet.Cell(row + 5, 5).Value = "Ecosystem Condition Index";
            worksheet.Cell(row + 5, 5).Style.Font.Bold = true;
            worksheet.Cell(row + 5, 5).Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Right;
            worksheet.Range(row + 5, 6, row + 5, 8).Merge().Style.Alignment.Horizontal = ClosedXML.Excel.XLAlignmentHorizontalValues.Center;
            worksheet.Cell(row + 5, 6).FormulaA1 = $"AVERAGE(F{row + 4}:H{row + 4})";

            // Apply formatting
            worksheet.Range("A1:H1").Style.Font.Bold = true;
            worksheet.Columns().AdjustToContents();

            worksheet.Columns("F", "H").Width = 10;

            // Set max width for columns
            foreach (var column in worksheet.Columns())
            {
                if (column.Width > 50)
                {
                    column.Width = 50; // Set a reasonable max width
                }
            }

            // Calculate all formulas in the workbook
            workbook.CalculateMode = ClosedXML.Excel.XLCalculateMode.Auto;
            workbook.FullCalculationOnLoad = true;

            // Save workbook to memory stream and trigger download
            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Seek(0, SeekOrigin.Begin);

            // Convert stream to byte array
            var bytes = stream.ToArray();
            var base64String = Convert.ToBase64String(bytes);

            var fileName = string.IsNullOrEmpty(streamModelName) ? "StreamModel.xlsx" : $"{streamModelName}.xlsx";
            // var file2 = File(stream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", fileName);


            var filePath = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64String;
            InvokeAsync(async () =>
            {
                await module.InvokeVoidAsync("downloadFileExcel", fileName, base64String);
            });
        });
    }
}